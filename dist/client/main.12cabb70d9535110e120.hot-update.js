webpackHotUpdate("main",{

/***/ "./src/store/reducer.ts":
/*!******************************!*\
  !*** ./src/store/reducer.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rootReducer = void 0;\r\nconst store_1 = __webpack_require__(/*! ../store */ \"./src/store.ts\");\r\nconst actions_1 = __webpack_require__(/*! ./actions */ \"./src/store/actions.ts\");\r\nconst generateRandomIndex_1 = __webpack_require__(/*! ../util/react/generateRandomIndex */ \"./src/util/react/generateRandomIndex.tsx\");\r\nconst rootReducer = (state = store_1.initialState, action) => {\r\n    switch (action.type) {\r\n        case actions_1.SET_TIMER_EVENT: {\r\n            return Object.assign(Object.assign({}, state), { timerModel: Object.assign(Object.assign({}, state.timerModel), { event: action.event }) });\r\n        }\r\n        case actions_1.SET_TIMER_PART: {\r\n            return Object.assign(Object.assign({}, state), { timerModel: Object.assign(Object.assign({}, state.timerModel), { part: action.part }) });\r\n        }\r\n        case actions_1.SET_TIME: {\r\n            return Object.assign(Object.assign({}, state), { timerModel: Object.assign(Object.assign({}, state.timerModel), { time: action.time }) });\r\n        }\r\n        case actions_1.SET_TIMER_MODE: {\r\n            return Object.assign(Object.assign({}, state), { timerModel: Object.assign(Object.assign({}, state.timerModel), { mode: action.mode }) });\r\n        }\r\n        case actions_1.STAT_ADD: {\r\n            if (state.stats.find((el) => {\r\n                return new Date(el.date).getDate() === new Date().getDate();\r\n            })) {\r\n                return Object.assign(Object.assign({}, state), { stats: state.stats.map((el) => {\r\n                        if (new Date(el.date).getDate() === new Date(action.stat.date).getDate()) {\r\n                            return Object.assign(Object.assign({}, el), { stops: el.stops + action.stat.stops, pauseTime: el.pauseTime + action.stat.pauseTime, workTime: el.workTime + action.stat.workTime, tomato: el.tomato + action.stat.tomato });\r\n                        }\r\n                        else {\r\n                            return el;\r\n                        }\r\n                    }) });\r\n            }\r\n            else {\r\n                return Object.assign(Object.assign({}, state), { stats: state.stats.concat(Object.assign(Object.assign({}, action.stat), { id: (0, generateRandomIndex_1.generateRandomString)() })) });\r\n            }\r\n        }\r\n        case actions_1.SET_TASKS: {\r\n            return Object.assign(Object.assign({}, state), { tasks: action.tasks });\r\n        }\r\n        case actions_1.INC_TOMATO:\r\n            return Object.assign(Object.assign({}, state), { tasks: state.tasks.map((task) => {\r\n                    if (task.id === action.id)\r\n                        return Object.assign(Object.assign({}, task), { tomato: task.tomato + 1 });\r\n                    return task;\r\n                }) });\r\n        case actions_1.DEC_TOMATO:\r\n            if (state.tasks.find((el) => el.id === action.id).tomato > 1) {\r\n                return Object.assign(Object.assign({}, state), { tasks: state.tasks.map((task) => {\r\n                        if (task.id === action.id) {\r\n                            if (task.tomato === 1) {\r\n                                return Object.assign(Object.assign({}, task), { tomato: task.tomato - 1, complete: task.complete + 1, done: true });\r\n                            }\r\n                            return Object.assign(Object.assign({}, task), { tomato: task.tomato - 1, complete: task.complete + 1 });\r\n                        }\r\n                        return task;\r\n                    }) });\r\n            }\r\n            else {\r\n                return Object.assign(Object.assign({}, state), { tasks: state.tasks.filter((task) => {\r\n                        return task.id !== action.id;\r\n                    }) });\r\n            }\r\n        case actions_1.EDIT_TASK:\r\n            return Object.assign(Object.assign({}, state), { tasks: state.tasks.map((task) => {\r\n                    if (task.id === action.id)\r\n                        return Object.assign(Object.assign({}, task), { title: action.title });\r\n                    return task;\r\n                }) });\r\n        case actions_1.ADD_TASK:\r\n            return Object.assign(Object.assign({}, state), { tasks: state.tasks.concat(action.task) });\r\n        case actions_1.DELETE_TASK:\r\n            return Object.assign(Object.assign({}, state), { tasks: state.tasks.filter((task) => task.id !== action.id) });\r\n    }\r\n    return Object.assign({}, state);\r\n};\r\nexports.rootReducer = rootReducer;\r\n\n\n//# sourceURL=webpack:///./src/store/reducer.ts?");

/***/ })

})