"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatepomodoro_box"]("main",{

/***/ "./node_modules/querystring/decode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/decode.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// If obj.hasOwnProperty has been overridden, then calling\r\n// obj.hasOwnProperty(prop) will break.\r\n// See: https://github.com/joyent/node/issues/1707\r\nfunction hasOwnProperty(obj, prop) {\r\n    return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\nmodule.exports = function (qs, sep, eq, options) {\r\n    sep = sep || '&';\r\n    eq = eq || '=';\r\n    var obj = {};\r\n    if (typeof qs !== 'string' || qs.length === 0) {\r\n        return obj;\r\n    }\r\n    var regexp = /\\+/g;\r\n    qs = qs.split(sep);\r\n    var maxKeys = 1000;\r\n    if (options && typeof options.maxKeys === 'number') {\r\n        maxKeys = options.maxKeys;\r\n    }\r\n    var len = qs.length;\r\n    // maxKeys <= 0 means that we should not limit keys count\r\n    if (maxKeys > 0 && len > maxKeys) {\r\n        len = maxKeys;\r\n    }\r\n    for (var i = 0; i < len; ++i) {\r\n        var x = qs[i].replace(regexp, '%20'), idx = x.indexOf(eq), kstr, vstr, k, v;\r\n        if (idx >= 0) {\r\n            kstr = x.substr(0, idx);\r\n            vstr = x.substr(idx + 1);\r\n        }\r\n        else {\r\n            kstr = x;\r\n            vstr = '';\r\n        }\r\n        k = decodeURIComponent(kstr);\r\n        v = decodeURIComponent(vstr);\r\n        if (!hasOwnProperty(obj, k)) {\r\n            obj[k] = v;\r\n        }\r\n        else if (Array.isArray(obj[k])) {\r\n            obj[k].push(v);\r\n        }\r\n        else {\r\n            obj[k] = [obj[k], v];\r\n        }\r\n    }\r\n    return obj;\r\n};\r\n\n\n//# sourceURL=webpack://pomodoro_box/./node_modules/querystring/decode.js?");

/***/ }),

/***/ "./node_modules/querystring/encode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/encode.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nvar stringifyPrimitive = function (v) {\r\n    switch (typeof v) {\r\n        case 'string':\r\n            return v;\r\n        case 'boolean':\r\n            return v ? 'true' : 'false';\r\n        case 'number':\r\n            return isFinite(v) ? v : '';\r\n        default:\r\n            return '';\r\n    }\r\n};\r\nmodule.exports = function (obj, sep, eq, name) {\r\n    sep = sep || '&';\r\n    eq = eq || '=';\r\n    if (obj === null) {\r\n        obj = undefined;\r\n    }\r\n    if (typeof obj === 'object') {\r\n        return Object.keys(obj).map(function (k) {\r\n            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\r\n            if (Array.isArray(obj[k])) {\r\n                return obj[k].map(function (v) {\r\n                    return ks + encodeURIComponent(stringifyPrimitive(v));\r\n                }).join(sep);\r\n            }\r\n            else {\r\n                return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\r\n            }\r\n        }).join(sep);\r\n    }\r\n    if (!name)\r\n        return '';\r\n    return encodeURIComponent(stringifyPrimitive(name)) + eq +\r\n        encodeURIComponent(stringifyPrimitive(obj));\r\n};\r\n\n\n//# sourceURL=webpack://pomodoro_box/./node_modules/querystring/encode.js?");

/***/ }),

/***/ "./node_modules/querystring/index.js":
/*!*******************************************!*\
  !*** ./node_modules/querystring/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring/decode.js\");\r\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring/encode.js\");\r\n\n\n//# sourceURL=webpack://pomodoro_box/./node_modules/querystring/index.js?");

/***/ }),

/***/ "./node_modules/url/node_modules/punycode/punycode.js":
/*!************************************************************!*\
  !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;\r\n/*! https://mths.be/punycode v1.3.2 by @mathias */\r\n;\r\n(function (root) {\r\n    /** Detect free variables */\r\n    var freeExports =  true && exports &&\r\n        !exports.nodeType && exports;\r\n    var freeModule =  true && module &&\r\n        !module.nodeType && module;\r\n    var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;\r\n    if (freeGlobal.global === freeGlobal ||\r\n        freeGlobal.window === freeGlobal ||\r\n        freeGlobal.self === freeGlobal) {\r\n        root = freeGlobal;\r\n    }\r\n    /**\r\n     * The `punycode` object.\r\n     * @name punycode\r\n     * @type Object\r\n     */\r\n    var punycode, \r\n    /** Highest positive signed 32-bit float value */\r\n    maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\r\n    /** Bootstring parameters */\r\n    base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, // 0x80\r\n    delimiter = '-', // '\\x2D'\r\n    /** Regular expressions */\r\n    regexPunycode = /^xn--/, regexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\r\n    regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\r\n    /** Error messages */\r\n    errors = {\r\n        'overflow': 'Overflow: input needs wider integers to process',\r\n        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\r\n        'invalid-input': 'Invalid input'\r\n    }, \r\n    /** Convenience shortcuts */\r\n    baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, \r\n    /** Temporary variable */\r\n    key;\r\n    /*--------------------------------------------------------------------------*/\r\n    /**\r\n     * A generic error utility function.\r\n     * @private\r\n     * @param {String} type The error type.\r\n     * @returns {Error} Throws a `RangeError` with the applicable error message.\r\n     */\r\n    function error(type) {\r\n        throw RangeError(errors[type]);\r\n    }\r\n    /**\r\n     * A generic `Array#map` utility function.\r\n     * @private\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} callback The function that gets called for every array\r\n     * item.\r\n     * @returns {Array} A new array of values returned by the callback function.\r\n     */\r\n    function map(array, fn) {\r\n        var length = array.length;\r\n        var result = [];\r\n        while (length--) {\r\n            result[length] = fn(array[length]);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * A simple `Array#map`-like wrapper to work with domain name strings or email\r\n     * addresses.\r\n     * @private\r\n     * @param {String} domain The domain name or email address.\r\n     * @param {Function} callback The function that gets called for every\r\n     * character.\r\n     * @returns {Array} A new string of characters returned by the callback\r\n     * function.\r\n     */\r\n    function mapDomain(string, fn) {\r\n        var parts = string.split('@');\r\n        var result = '';\r\n        if (parts.length > 1) {\r\n            // In email addresses, only the domain name should be punycoded. Leave\r\n            // the local part (i.e. everything up to `@`) intact.\r\n            result = parts[0] + '@';\r\n            string = parts[1];\r\n        }\r\n        // Avoid `split(regex)` for IE8 compatibility. See #17.\r\n        string = string.replace(regexSeparators, '\\x2E');\r\n        var labels = string.split('.');\r\n        var encoded = map(labels, fn).join('.');\r\n        return result + encoded;\r\n    }\r\n    /**\r\n     * Creates an array containing the numeric code points of each Unicode\r\n     * character in the string. While JavaScript uses UCS-2 internally,\r\n     * this function will convert a pair of surrogate halves (each of which\r\n     * UCS-2 exposes as separate characters) into a single code point,\r\n     * matching UTF-16.\r\n     * @see `punycode.ucs2.encode`\r\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\r\n     * @memberOf punycode.ucs2\r\n     * @name decode\r\n     * @param {String} string The Unicode input string (UCS-2).\r\n     * @returns {Array} The new array of code points.\r\n     */\r\n    function ucs2decode(string) {\r\n        var output = [], counter = 0, length = string.length, value, extra;\r\n        while (counter < length) {\r\n            value = string.charCodeAt(counter++);\r\n            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\r\n                // high surrogate, and there is a next character\r\n                extra = string.charCodeAt(counter++);\r\n                if ((extra & 0xFC00) == 0xDC00) { // low surrogate\r\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\r\n                }\r\n                else {\r\n                    // unmatched surrogate; only append this code unit, in case the next\r\n                    // code unit is the high surrogate of a surrogate pair\r\n                    output.push(value);\r\n                    counter--;\r\n                }\r\n            }\r\n            else {\r\n                output.push(value);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    /**\r\n     * Creates a string based on an array of numeric code points.\r\n     * @see `punycode.ucs2.decode`\r\n     * @memberOf punycode.ucs2\r\n     * @name encode\r\n     * @param {Array} codePoints The array of numeric code points.\r\n     * @returns {String} The new Unicode string (UCS-2).\r\n     */\r\n    function ucs2encode(array) {\r\n        return map(array, function (value) {\r\n            var output = '';\r\n            if (value > 0xFFFF) {\r\n                value -= 0x10000;\r\n                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\r\n                value = 0xDC00 | value & 0x3FF;\r\n            }\r\n            output += stringFromCharCode(value);\r\n            return output;\r\n        }).join('');\r\n    }\r\n    /**\r\n     * Converts a basic code point into a digit/integer.\r\n     * @see `digitToBasic()`\r\n     * @private\r\n     * @param {Number} codePoint The basic numeric code point value.\r\n     * @returns {Number} The numeric value of a basic code point (for use in\r\n     * representing integers) in the range `0` to `base - 1`, or `base` if\r\n     * the code point does not represent a value.\r\n     */\r\n    function basicToDigit(codePoint) {\r\n        if (codePoint - 48 < 10) {\r\n            return codePoint - 22;\r\n        }\r\n        if (codePoint - 65 < 26) {\r\n            return codePoint - 65;\r\n        }\r\n        if (codePoint - 97 < 26) {\r\n            return codePoint - 97;\r\n        }\r\n        return base;\r\n    }\r\n    /**\r\n     * Converts a digit/integer into a basic code point.\r\n     * @see `basicToDigit()`\r\n     * @private\r\n     * @param {Number} digit The numeric value of a basic code point.\r\n     * @returns {Number} The basic code point whose value (when used for\r\n     * representing integers) is `digit`, which needs to be in the range\r\n     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\r\n     * used; else, the lowercase form is used. The behavior is undefined\r\n     * if `flag` is non-zero and `digit` has no uppercase form.\r\n     */\r\n    function digitToBasic(digit, flag) {\r\n        //  0..25 map to ASCII a..z or A..Z\r\n        // 26..35 map to ASCII 0..9\r\n        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\r\n    }\r\n    /**\r\n     * Bias adaptation function as per section 3.4 of RFC 3492.\r\n     * http://tools.ietf.org/html/rfc3492#section-3.4\r\n     * @private\r\n     */\r\n    function adapt(delta, numPoints, firstTime) {\r\n        var k = 0;\r\n        delta = firstTime ? floor(delta / damp) : delta >> 1;\r\n        delta += floor(delta / numPoints);\r\n        for ( /* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\r\n            delta = floor(delta / baseMinusTMin);\r\n        }\r\n        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\r\n    }\r\n    /**\r\n     * Converts a Punycode string of ASCII-only symbols to a string of Unicode\r\n     * symbols.\r\n     * @memberOf punycode\r\n     * @param {String} input The Punycode string of ASCII-only symbols.\r\n     * @returns {String} The resulting string of Unicode symbols.\r\n     */\r\n    function decode(input) {\r\n        // Don't use UCS-2\r\n        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, \r\n        /** Cached calculation results */\r\n        baseMinusT;\r\n        // Handle the basic code points: let `basic` be the number of input code\r\n        // points before the last delimiter, or `0` if there is none, then copy\r\n        // the first basic code points to the output.\r\n        basic = input.lastIndexOf(delimiter);\r\n        if (basic < 0) {\r\n            basic = 0;\r\n        }\r\n        for (j = 0; j < basic; ++j) {\r\n            // if it's not a basic code point\r\n            if (input.charCodeAt(j) >= 0x80) {\r\n                error('not-basic');\r\n            }\r\n            output.push(input.charCodeAt(j));\r\n        }\r\n        // Main decoding loop: start just after the last delimiter if any basic code\r\n        // points were copied; start at the beginning otherwise.\r\n        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\r\n            // `index` is the index of the next character to be consumed.\r\n            // Decode a generalized variable-length integer into `delta`,\r\n            // which gets added to `i`. The overflow checking is easier\r\n            // if we increase `i` as we go, then subtract off its starting\r\n            // value at the end to obtain `delta`.\r\n            for (oldi = i, w = 1, k = base; /* no condition */; k += base) {\r\n                if (index >= inputLength) {\r\n                    error('invalid-input');\r\n                }\r\n                digit = basicToDigit(input.charCodeAt(index++));\r\n                if (digit >= base || digit > floor((maxInt - i) / w)) {\r\n                    error('overflow');\r\n                }\r\n                i += digit * w;\r\n                t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\r\n                if (digit < t) {\r\n                    break;\r\n                }\r\n                baseMinusT = base - t;\r\n                if (w > floor(maxInt / baseMinusT)) {\r\n                    error('overflow');\r\n                }\r\n                w *= baseMinusT;\r\n            }\r\n            out = output.length + 1;\r\n            bias = adapt(i - oldi, out, oldi == 0);\r\n            // `i` was supposed to wrap around from `out` to `0`,\r\n            // incrementing `n` each time, so we'll fix that now:\r\n            if (floor(i / out) > maxInt - n) {\r\n                error('overflow');\r\n            }\r\n            n += floor(i / out);\r\n            i %= out;\r\n            // Insert `n` at position `i` of the output\r\n            output.splice(i++, 0, n);\r\n        }\r\n        return ucs2encode(output);\r\n    }\r\n    /**\r\n     * Converts a string of Unicode symbols (e.g. a domain name label) to a\r\n     * Punycode string of ASCII-only symbols.\r\n     * @memberOf punycode\r\n     * @param {String} input The string of Unicode symbols.\r\n     * @returns {String} The resulting Punycode string of ASCII-only symbols.\r\n     */\r\n    function encode(input) {\r\n        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], \r\n        /** `inputLength` will hold the number of code points in `input`. */\r\n        inputLength, \r\n        /** Cached calculation results */\r\n        handledCPCountPlusOne, baseMinusT, qMinusT;\r\n        // Convert the input in UCS-2 to Unicode\r\n        input = ucs2decode(input);\r\n        // Cache the length\r\n        inputLength = input.length;\r\n        // Initialize the state\r\n        n = initialN;\r\n        delta = 0;\r\n        bias = initialBias;\r\n        // Handle the basic code points\r\n        for (j = 0; j < inputLength; ++j) {\r\n            currentValue = input[j];\r\n            if (currentValue < 0x80) {\r\n                output.push(stringFromCharCode(currentValue));\r\n            }\r\n        }\r\n        handledCPCount = basicLength = output.length;\r\n        // `handledCPCount` is the number of code points that have been handled;\r\n        // `basicLength` is the number of basic code points.\r\n        // Finish the basic string - if it is not empty - with a delimiter\r\n        if (basicLength) {\r\n            output.push(delimiter);\r\n        }\r\n        // Main encoding loop:\r\n        while (handledCPCount < inputLength) {\r\n            // All non-basic code points < n have been handled already. Find the next\r\n            // larger one:\r\n            for (m = maxInt, j = 0; j < inputLength; ++j) {\r\n                currentValue = input[j];\r\n                if (currentValue >= n && currentValue < m) {\r\n                    m = currentValue;\r\n                }\r\n            }\r\n            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\r\n            // but guard against overflow\r\n            handledCPCountPlusOne = handledCPCount + 1;\r\n            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\r\n                error('overflow');\r\n            }\r\n            delta += (m - n) * handledCPCountPlusOne;\r\n            n = m;\r\n            for (j = 0; j < inputLength; ++j) {\r\n                currentValue = input[j];\r\n                if (currentValue < n && ++delta > maxInt) {\r\n                    error('overflow');\r\n                }\r\n                if (currentValue == n) {\r\n                    // Represent delta as a generalized variable-length integer\r\n                    for (q = delta, k = base; /* no condition */; k += base) {\r\n                        t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\r\n                        if (q < t) {\r\n                            break;\r\n                        }\r\n                        qMinusT = q - t;\r\n                        baseMinusT = base - t;\r\n                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\r\n                        q = floor(qMinusT / baseMinusT);\r\n                    }\r\n                    output.push(stringFromCharCode(digitToBasic(q, 0)));\r\n                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\r\n                    delta = 0;\r\n                    ++handledCPCount;\r\n                }\r\n            }\r\n            ++delta;\r\n            ++n;\r\n        }\r\n        return output.join('');\r\n    }\r\n    /**\r\n     * Converts a Punycode string representing a domain name or an email address\r\n     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\r\n     * it doesn't matter if you call it on a string that has already been\r\n     * converted to Unicode.\r\n     * @memberOf punycode\r\n     * @param {String} input The Punycoded domain name or email address to\r\n     * convert to Unicode.\r\n     * @returns {String} The Unicode representation of the given Punycode\r\n     * string.\r\n     */\r\n    function toUnicode(input) {\r\n        return mapDomain(input, function (string) {\r\n            return regexPunycode.test(string)\r\n                ? decode(string.slice(4).toLowerCase())\r\n                : string;\r\n        });\r\n    }\r\n    /**\r\n     * Converts a Unicode string representing a domain name or an email address to\r\n     * Punycode. Only the non-ASCII parts of the domain name will be converted,\r\n     * i.e. it doesn't matter if you call it with a domain that's already in\r\n     * ASCII.\r\n     * @memberOf punycode\r\n     * @param {String} input The domain name or email address to convert, as a\r\n     * Unicode string.\r\n     * @returns {String} The Punycode representation of the given domain name or\r\n     * email address.\r\n     */\r\n    function toASCII(input) {\r\n        return mapDomain(input, function (string) {\r\n            return regexNonASCII.test(string)\r\n                ? 'xn--' + encode(string)\r\n                : string;\r\n        });\r\n    }\r\n    /*--------------------------------------------------------------------------*/\r\n    /** Define the public API */\r\n    punycode = {\r\n        /**\r\n         * A string representing the current Punycode.js version number.\r\n         * @memberOf punycode\r\n         * @type String\r\n         */\r\n        'version': '1.3.2',\r\n        /**\r\n         * An object of methods to convert from JavaScript's internal character\r\n         * representation (UCS-2) to Unicode code points, and back.\r\n         * @see <https://mathiasbynens.be/notes/javascript-encoding>\r\n         * @memberOf punycode\r\n         * @type Object\r\n         */\r\n        'ucs2': {\r\n            'decode': ucs2decode,\r\n            'encode': ucs2encode\r\n        },\r\n        'decode': decode,\r\n        'encode': encode,\r\n        'toASCII': toASCII,\r\n        'toUnicode': toUnicode\r\n    };\r\n    /** Expose `punycode` */\r\n    // Some AMD build optimizers, like r.js, check for specific condition patterns\r\n    // like the following:\r\n    if (true) {\r\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n            return punycode;\r\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    }\r\n    else {}\r\n}(this));\r\n\n\n//# sourceURL=webpack://pomodoro_box/./node_modules/url/node_modules/punycode/punycode.js?");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/url/node_modules/punycode/punycode.js\");\r\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\r\nexports.parse = urlParse;\r\nexports.resolve = urlResolve;\r\nexports.resolveObject = urlResolveObject;\r\nexports.format = urlFormat;\r\nexports.Url = Url;\r\nfunction Url() {\r\n    this.protocol = null;\r\n    this.slashes = null;\r\n    this.auth = null;\r\n    this.host = null;\r\n    this.port = null;\r\n    this.hostname = null;\r\n    this.hash = null;\r\n    this.search = null;\r\n    this.query = null;\r\n    this.pathname = null;\r\n    this.path = null;\r\n    this.href = null;\r\n}\r\n// Reference: RFC 3986, RFC 1808, RFC 2396\r\n// define these here so at least they only have to be\r\n// compiled once on the first module load.\r\nvar protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, \r\n// Special case for a simple path URL\r\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/, \r\n// RFC 2396: characters reserved for delimiting URLs.\r\n// We actually just auto-escape these.\r\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'], \r\n// RFC 2396: characters not allowed for various reasons.\r\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims), \r\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\r\nautoEscape = ['\\''].concat(unwise), \r\n// Characters that are never ever allowed in a hostname.\r\n// Note that any invalid chars are also handled, but these\r\n// are the ones that are *expected* to be seen, so we fast-path\r\n// them.\r\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape), hostEndingChars = ['/', '?', '#'], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, \r\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\r\nunsafeProtocol = {\r\n    'javascript': true,\r\n    'javascript:': true\r\n}, \r\n// protocols that never have a hostname.\r\nhostlessProtocol = {\r\n    'javascript': true,\r\n    'javascript:': true\r\n}, \r\n// protocols that always contain a // bit.\r\nslashedProtocol = {\r\n    'http': true,\r\n    'https': true,\r\n    'ftp': true,\r\n    'gopher': true,\r\n    'file': true,\r\n    'http:': true,\r\n    'https:': true,\r\n    'ftp:': true,\r\n    'gopher:': true,\r\n    'file:': true\r\n}, querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring/index.js\");\r\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\r\n    if (url && util.isObject(url) && url instanceof Url)\r\n        return url;\r\n    var u = new Url;\r\n    u.parse(url, parseQueryString, slashesDenoteHost);\r\n    return u;\r\n}\r\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\r\n    if (!util.isString(url)) {\r\n        throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\r\n    }\r\n    // Copy chrome, IE, opera backslash-handling behavior.\r\n    // Back slashes before the query string get converted to forward slashes\r\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\r\n    var queryIndex = url.indexOf('?'), splitter = (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#', uSplit = url.split(splitter), slashRegex = /\\\\/g;\r\n    uSplit[0] = uSplit[0].replace(slashRegex, '/');\r\n    url = uSplit.join(splitter);\r\n    var rest = url;\r\n    // trim before proceeding.\r\n    // This is to support parse stuff like \"  http://foo.com  \\n\"\r\n    rest = rest.trim();\r\n    if (!slashesDenoteHost && url.split('#').length === 1) {\r\n        // Try fast path regexp\r\n        var simplePath = simplePathPattern.exec(rest);\r\n        if (simplePath) {\r\n            this.path = rest;\r\n            this.href = rest;\r\n            this.pathname = simplePath[1];\r\n            if (simplePath[2]) {\r\n                this.search = simplePath[2];\r\n                if (parseQueryString) {\r\n                    this.query = querystring.parse(this.search.substr(1));\r\n                }\r\n                else {\r\n                    this.query = this.search.substr(1);\r\n                }\r\n            }\r\n            else if (parseQueryString) {\r\n                this.search = '';\r\n                this.query = {};\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    var proto = protocolPattern.exec(rest);\r\n    if (proto) {\r\n        proto = proto[0];\r\n        var lowerProto = proto.toLowerCase();\r\n        this.protocol = lowerProto;\r\n        rest = rest.substr(proto.length);\r\n    }\r\n    // figure out if it's got a host\r\n    // user@server is *always* interpreted as a hostname, and url\r\n    // resolution will treat //foo/bar as host=foo,path=bar because that's\r\n    // how the browser resolves relative URLs.\r\n    if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\r\n        var slashes = rest.substr(0, 2) === '//';\r\n        if (slashes && !(proto && hostlessProtocol[proto])) {\r\n            rest = rest.substr(2);\r\n            this.slashes = true;\r\n        }\r\n    }\r\n    if (!hostlessProtocol[proto] &&\r\n        (slashes || (proto && !slashedProtocol[proto]))) {\r\n        // there's a hostname.\r\n        // the first instance of /, ?, ;, or # ends the host.\r\n        //\r\n        // If there is an @ in the hostname, then non-host chars *are* allowed\r\n        // to the left of the last @ sign, unless some host-ending character\r\n        // comes *before* the @-sign.\r\n        // URLs are obnoxious.\r\n        //\r\n        // ex:\r\n        // http://a@b@c/ => user:a@b host:c\r\n        // http://a@b?@c => user:a host:c path:/?@c\r\n        // v0.12 TODO(isaacs): This is not quite how Chrome does things.\r\n        // Review our test case against browsers more comprehensively.\r\n        // find the first instance of any hostEndingChars\r\n        var hostEnd = -1;\r\n        for (var i = 0; i < hostEndingChars.length; i++) {\r\n            var hec = rest.indexOf(hostEndingChars[i]);\r\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\r\n                hostEnd = hec;\r\n        }\r\n        // at this point, either we have an explicit point where the\r\n        // auth portion cannot go past, or the last @ char is the decider.\r\n        var auth, atSign;\r\n        if (hostEnd === -1) {\r\n            // atSign can be anywhere.\r\n            atSign = rest.lastIndexOf('@');\r\n        }\r\n        else {\r\n            // atSign must be in auth portion.\r\n            // http://a@b/c@d => host:b auth:a path:/c@d\r\n            atSign = rest.lastIndexOf('@', hostEnd);\r\n        }\r\n        // Now we have a portion which is definitely the auth.\r\n        // Pull that off.\r\n        if (atSign !== -1) {\r\n            auth = rest.slice(0, atSign);\r\n            rest = rest.slice(atSign + 1);\r\n            this.auth = decodeURIComponent(auth);\r\n        }\r\n        // the host is the remaining to the left of the first non-host char\r\n        hostEnd = -1;\r\n        for (var i = 0; i < nonHostChars.length; i++) {\r\n            var hec = rest.indexOf(nonHostChars[i]);\r\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\r\n                hostEnd = hec;\r\n        }\r\n        // if we still have not hit it, then the entire thing is a host.\r\n        if (hostEnd === -1)\r\n            hostEnd = rest.length;\r\n        this.host = rest.slice(0, hostEnd);\r\n        rest = rest.slice(hostEnd);\r\n        // pull out port.\r\n        this.parseHost();\r\n        // we've indicated that there is a hostname,\r\n        // so even if it's empty, it has to be present.\r\n        this.hostname = this.hostname || '';\r\n        // if hostname begins with [ and ends with ]\r\n        // assume that it's an IPv6 address.\r\n        var ipv6Hostname = this.hostname[0] === '[' &&\r\n            this.hostname[this.hostname.length - 1] === ']';\r\n        // validate a little.\r\n        if (!ipv6Hostname) {\r\n            var hostparts = this.hostname.split(/\\./);\r\n            for (var i = 0, l = hostparts.length; i < l; i++) {\r\n                var part = hostparts[i];\r\n                if (!part)\r\n                    continue;\r\n                if (!part.match(hostnamePartPattern)) {\r\n                    var newpart = '';\r\n                    for (var j = 0, k = part.length; j < k; j++) {\r\n                        if (part.charCodeAt(j) > 127) {\r\n                            // we replace non-ASCII char with a temporary placeholder\r\n                            // we need this to make sure size of hostname is not\r\n                            // broken by replacing non-ASCII by nothing\r\n                            newpart += 'x';\r\n                        }\r\n                        else {\r\n                            newpart += part[j];\r\n                        }\r\n                    }\r\n                    // we test again with ASCII char only\r\n                    if (!newpart.match(hostnamePartPattern)) {\r\n                        var validParts = hostparts.slice(0, i);\r\n                        var notHost = hostparts.slice(i + 1);\r\n                        var bit = part.match(hostnamePartStart);\r\n                        if (bit) {\r\n                            validParts.push(bit[1]);\r\n                            notHost.unshift(bit[2]);\r\n                        }\r\n                        if (notHost.length) {\r\n                            rest = '/' + notHost.join('.') + rest;\r\n                        }\r\n                        this.hostname = validParts.join('.');\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.hostname.length > hostnameMaxLen) {\r\n            this.hostname = '';\r\n        }\r\n        else {\r\n            // hostnames are always lower case.\r\n            this.hostname = this.hostname.toLowerCase();\r\n        }\r\n        if (!ipv6Hostname) {\r\n            // IDNA Support: Returns a punycoded representation of \"domain\".\r\n            // It only converts parts of the domain name that\r\n            // have non-ASCII characters, i.e. it doesn't matter if\r\n            // you call it with a domain that already is ASCII-only.\r\n            this.hostname = punycode.toASCII(this.hostname);\r\n        }\r\n        var p = this.port ? ':' + this.port : '';\r\n        var h = this.hostname || '';\r\n        this.host = h + p;\r\n        this.href += this.host;\r\n        // strip [ and ] from the hostname\r\n        // the host field still retains them, though\r\n        if (ipv6Hostname) {\r\n            this.hostname = this.hostname.substr(1, this.hostname.length - 2);\r\n            if (rest[0] !== '/') {\r\n                rest = '/' + rest;\r\n            }\r\n        }\r\n    }\r\n    // now rest is set to the post-host stuff.\r\n    // chop off any delim chars.\r\n    if (!unsafeProtocol[lowerProto]) {\r\n        // First, make 100% sure that any \"autoEscape\" chars get\r\n        // escaped, even if encodeURIComponent doesn't think they\r\n        // need to be.\r\n        for (var i = 0, l = autoEscape.length; i < l; i++) {\r\n            var ae = autoEscape[i];\r\n            if (rest.indexOf(ae) === -1)\r\n                continue;\r\n            var esc = encodeURIComponent(ae);\r\n            if (esc === ae) {\r\n                esc = escape(ae);\r\n            }\r\n            rest = rest.split(ae).join(esc);\r\n        }\r\n    }\r\n    // chop off from the tail first.\r\n    var hash = rest.indexOf('#');\r\n    if (hash !== -1) {\r\n        // got a fragment string.\r\n        this.hash = rest.substr(hash);\r\n        rest = rest.slice(0, hash);\r\n    }\r\n    var qm = rest.indexOf('?');\r\n    if (qm !== -1) {\r\n        this.search = rest.substr(qm);\r\n        this.query = rest.substr(qm + 1);\r\n        if (parseQueryString) {\r\n            this.query = querystring.parse(this.query);\r\n        }\r\n        rest = rest.slice(0, qm);\r\n    }\r\n    else if (parseQueryString) {\r\n        // no query string, but parseQueryString still requested\r\n        this.search = '';\r\n        this.query = {};\r\n    }\r\n    if (rest)\r\n        this.pathname = rest;\r\n    if (slashedProtocol[lowerProto] &&\r\n        this.hostname && !this.pathname) {\r\n        this.pathname = '/';\r\n    }\r\n    //to support http.request\r\n    if (this.pathname || this.search) {\r\n        var p = this.pathname || '';\r\n        var s = this.search || '';\r\n        this.path = p + s;\r\n    }\r\n    // finally, reconstruct the href based on what has been validated.\r\n    this.href = this.format();\r\n    return this;\r\n};\r\n// format a parsed object into a url string\r\nfunction urlFormat(obj) {\r\n    // ensure it's an object, and not a string url.\r\n    // If it's an obj, this is a no-op.\r\n    // this way, you can call url_format() on strings\r\n    // to clean up potentially wonky urls.\r\n    if (util.isString(obj))\r\n        obj = urlParse(obj);\r\n    if (!(obj instanceof Url))\r\n        return Url.prototype.format.call(obj);\r\n    return obj.format();\r\n}\r\nUrl.prototype.format = function () {\r\n    var auth = this.auth || '';\r\n    if (auth) {\r\n        auth = encodeURIComponent(auth);\r\n        auth = auth.replace(/%3A/i, ':');\r\n        auth += '@';\r\n    }\r\n    var protocol = this.protocol || '', pathname = this.pathname || '', hash = this.hash || '', host = false, query = '';\r\n    if (this.host) {\r\n        host = auth + this.host;\r\n    }\r\n    else if (this.hostname) {\r\n        host = auth + (this.hostname.indexOf(':') === -1 ?\r\n            this.hostname :\r\n            '[' + this.hostname + ']');\r\n        if (this.port) {\r\n            host += ':' + this.port;\r\n        }\r\n    }\r\n    if (this.query &&\r\n        util.isObject(this.query) &&\r\n        Object.keys(this.query).length) {\r\n        query = querystring.stringify(this.query);\r\n    }\r\n    var search = this.search || (query && ('?' + query)) || '';\r\n    if (protocol && protocol.substr(-1) !== ':')\r\n        protocol += ':';\r\n    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\r\n    // unless they had them to begin with.\r\n    if (this.slashes ||\r\n        (!protocol || slashedProtocol[protocol]) && host !== false) {\r\n        host = '//' + (host || '');\r\n        if (pathname && pathname.charAt(0) !== '/')\r\n            pathname = '/' + pathname;\r\n    }\r\n    else if (!host) {\r\n        host = '';\r\n    }\r\n    if (hash && hash.charAt(0) !== '#')\r\n        hash = '#' + hash;\r\n    if (search && search.charAt(0) !== '?')\r\n        search = '?' + search;\r\n    pathname = pathname.replace(/[?#]/g, function (match) {\r\n        return encodeURIComponent(match);\r\n    });\r\n    search = search.replace('#', '%23');\r\n    return protocol + host + pathname + search + hash;\r\n};\r\nfunction urlResolve(source, relative) {\r\n    return urlParse(source, false, true).resolve(relative);\r\n}\r\nUrl.prototype.resolve = function (relative) {\r\n    return this.resolveObject(urlParse(relative, false, true)).format();\r\n};\r\nfunction urlResolveObject(source, relative) {\r\n    if (!source)\r\n        return relative;\r\n    return urlParse(source, false, true).resolveObject(relative);\r\n}\r\nUrl.prototype.resolveObject = function (relative) {\r\n    if (util.isString(relative)) {\r\n        var rel = new Url();\r\n        rel.parse(relative, false, true);\r\n        relative = rel;\r\n    }\r\n    var result = new Url();\r\n    var tkeys = Object.keys(this);\r\n    for (var tk = 0; tk < tkeys.length; tk++) {\r\n        var tkey = tkeys[tk];\r\n        result[tkey] = this[tkey];\r\n    }\r\n    // hash is always overridden, no matter what.\r\n    // even href=\"\" will remove it.\r\n    result.hash = relative.hash;\r\n    // if the relative url is empty, then there's nothing left to do here.\r\n    if (relative.href === '') {\r\n        result.href = result.format();\r\n        return result;\r\n    }\r\n    // hrefs like //foo/bar always cut to the protocol.\r\n    if (relative.slashes && !relative.protocol) {\r\n        // take everything except the protocol from relative\r\n        var rkeys = Object.keys(relative);\r\n        for (var rk = 0; rk < rkeys.length; rk++) {\r\n            var rkey = rkeys[rk];\r\n            if (rkey !== 'protocol')\r\n                result[rkey] = relative[rkey];\r\n        }\r\n        //urlParse appends trailing / to urls like http://www.example.com\r\n        if (slashedProtocol[result.protocol] &&\r\n            result.hostname && !result.pathname) {\r\n            result.path = result.pathname = '/';\r\n        }\r\n        result.href = result.format();\r\n        return result;\r\n    }\r\n    if (relative.protocol && relative.protocol !== result.protocol) {\r\n        // if it's a known url protocol, then changing\r\n        // the protocol does weird things\r\n        // first, if it's not file:, then we MUST have a host,\r\n        // and if there was a path\r\n        // to begin with, then we MUST have a path.\r\n        // if it is file:, then the host is dropped,\r\n        // because that's known to be hostless.\r\n        // anything else is assumed to be absolute.\r\n        if (!slashedProtocol[relative.protocol]) {\r\n            var keys = Object.keys(relative);\r\n            for (var v = 0; v < keys.length; v++) {\r\n                var k = keys[v];\r\n                result[k] = relative[k];\r\n            }\r\n            result.href = result.format();\r\n            return result;\r\n        }\r\n        result.protocol = relative.protocol;\r\n        if (!relative.host && !hostlessProtocol[relative.protocol]) {\r\n            var relPath = (relative.pathname || '').split('/');\r\n            while (relPath.length && !(relative.host = relPath.shift()))\r\n                ;\r\n            if (!relative.host)\r\n                relative.host = '';\r\n            if (!relative.hostname)\r\n                relative.hostname = '';\r\n            if (relPath[0] !== '')\r\n                relPath.unshift('');\r\n            if (relPath.length < 2)\r\n                relPath.unshift('');\r\n            result.pathname = relPath.join('/');\r\n        }\r\n        else {\r\n            result.pathname = relative.pathname;\r\n        }\r\n        result.search = relative.search;\r\n        result.query = relative.query;\r\n        result.host = relative.host || '';\r\n        result.auth = relative.auth;\r\n        result.hostname = relative.hostname || relative.host;\r\n        result.port = relative.port;\r\n        // to support http.request\r\n        if (result.pathname || result.search) {\r\n            var p = result.pathname || '';\r\n            var s = result.search || '';\r\n            result.path = p + s;\r\n        }\r\n        result.slashes = result.slashes || relative.slashes;\r\n        result.href = result.format();\r\n        return result;\r\n    }\r\n    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'), isRelAbs = (relative.host ||\r\n        relative.pathname && relative.pathname.charAt(0) === '/'), mustEndAbs = (isRelAbs || isSourceAbs ||\r\n        (result.host && relative.pathname)), removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split('/') || [], relPath = relative.pathname && relative.pathname.split('/') || [], psychotic = result.protocol && !slashedProtocol[result.protocol];\r\n    // if the url is a non-slashed url, then relative\r\n    // links like ../.. should be able\r\n    // to crawl up to the hostname, as well.  This is strange.\r\n    // result.protocol has already been set by now.\r\n    // Later on, put the first path part into the host field.\r\n    if (psychotic) {\r\n        result.hostname = '';\r\n        result.port = null;\r\n        if (result.host) {\r\n            if (srcPath[0] === '')\r\n                srcPath[0] = result.host;\r\n            else\r\n                srcPath.unshift(result.host);\r\n        }\r\n        result.host = '';\r\n        if (relative.protocol) {\r\n            relative.hostname = null;\r\n            relative.port = null;\r\n            if (relative.host) {\r\n                if (relPath[0] === '')\r\n                    relPath[0] = relative.host;\r\n                else\r\n                    relPath.unshift(relative.host);\r\n            }\r\n            relative.host = null;\r\n        }\r\n        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\r\n    }\r\n    if (isRelAbs) {\r\n        // it's absolute.\r\n        result.host = (relative.host || relative.host === '') ?\r\n            relative.host : result.host;\r\n        result.hostname = (relative.hostname || relative.hostname === '') ?\r\n            relative.hostname : result.hostname;\r\n        result.search = relative.search;\r\n        result.query = relative.query;\r\n        srcPath = relPath;\r\n        // fall through to the dot-handling below.\r\n    }\r\n    else if (relPath.length) {\r\n        // it's relative\r\n        // throw away the existing file, and take the new path instead.\r\n        if (!srcPath)\r\n            srcPath = [];\r\n        srcPath.pop();\r\n        srcPath = srcPath.concat(relPath);\r\n        result.search = relative.search;\r\n        result.query = relative.query;\r\n    }\r\n    else if (!util.isNullOrUndefined(relative.search)) {\r\n        // just pull out the search.\r\n        // like href='?foo'.\r\n        // Put this after the other two cases because it simplifies the booleans\r\n        if (psychotic) {\r\n            result.hostname = result.host = srcPath.shift();\r\n            //occationaly the auth can get stuck only in host\r\n            //this especially happens in cases like\r\n            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n            var authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n                result.host.split('@') : false;\r\n            if (authInHost) {\r\n                result.auth = authInHost.shift();\r\n                result.host = result.hostname = authInHost.shift();\r\n            }\r\n        }\r\n        result.search = relative.search;\r\n        result.query = relative.query;\r\n        //to support http.request\r\n        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\r\n            result.path = (result.pathname ? result.pathname : '') +\r\n                (result.search ? result.search : '');\r\n        }\r\n        result.href = result.format();\r\n        return result;\r\n    }\r\n    if (!srcPath.length) {\r\n        // no path at all.  easy.\r\n        // we've already handled the other stuff above.\r\n        result.pathname = null;\r\n        //to support http.request\r\n        if (result.search) {\r\n            result.path = '/' + result.search;\r\n        }\r\n        else {\r\n            result.path = null;\r\n        }\r\n        result.href = result.format();\r\n        return result;\r\n    }\r\n    // if a url ENDs in . or .., then it must get a trailing slash.\r\n    // however, if it ends in anything else non-slashy,\r\n    // then it must NOT get a trailing slash.\r\n    var last = srcPath.slice(-1)[0];\r\n    var hasTrailingSlash = ((result.host || relative.host || srcPath.length > 1) &&\r\n        (last === '.' || last === '..') || last === '');\r\n    // strip single dots, resolve double dots to parent dir\r\n    // if the path tries to go above the root, `up` ends up > 0\r\n    var up = 0;\r\n    for (var i = srcPath.length; i >= 0; i--) {\r\n        last = srcPath[i];\r\n        if (last === '.') {\r\n            srcPath.splice(i, 1);\r\n        }\r\n        else if (last === '..') {\r\n            srcPath.splice(i, 1);\r\n            up++;\r\n        }\r\n        else if (up) {\r\n            srcPath.splice(i, 1);\r\n            up--;\r\n        }\r\n    }\r\n    // if the path is allowed to go above the root, restore leading ..s\r\n    if (!mustEndAbs && !removeAllDots) {\r\n        for (; up--; up) {\r\n            srcPath.unshift('..');\r\n        }\r\n    }\r\n    if (mustEndAbs && srcPath[0] !== '' &&\r\n        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\r\n        srcPath.unshift('');\r\n    }\r\n    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\r\n        srcPath.push('');\r\n    }\r\n    var isAbsolute = srcPath[0] === '' ||\r\n        (srcPath[0] && srcPath[0].charAt(0) === '/');\r\n    // put the host back\r\n    if (psychotic) {\r\n        result.hostname = result.host = isAbsolute ? '' :\r\n            srcPath.length ? srcPath.shift() : '';\r\n        //occationaly the auth can get stuck only in host\r\n        //this especially happens in cases like\r\n        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n        var authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n            result.host.split('@') : false;\r\n        if (authInHost) {\r\n            result.auth = authInHost.shift();\r\n            result.host = result.hostname = authInHost.shift();\r\n        }\r\n    }\r\n    mustEndAbs = mustEndAbs || (result.host && srcPath.length);\r\n    if (mustEndAbs && !isAbsolute) {\r\n        srcPath.unshift('');\r\n    }\r\n    if (!srcPath.length) {\r\n        result.pathname = null;\r\n        result.path = null;\r\n    }\r\n    else {\r\n        result.pathname = srcPath.join('/');\r\n    }\r\n    //to support request.http\r\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\r\n        result.path = (result.pathname ? result.pathname : '') +\r\n            (result.search ? result.search : '');\r\n    }\r\n    result.auth = relative.auth || result.auth;\r\n    result.slashes = result.slashes || relative.slashes;\r\n    result.href = result.format();\r\n    return result;\r\n};\r\nUrl.prototype.parseHost = function () {\r\n    var host = this.host;\r\n    var port = portPattern.exec(host);\r\n    if (port) {\r\n        port = port[0];\r\n        if (port !== ':') {\r\n            this.port = port.substr(1);\r\n        }\r\n        host = host.substr(0, host.length - port.length);\r\n    }\r\n    if (host)\r\n        this.hostname = host;\r\n};\r\n\n\n//# sourceURL=webpack://pomodoro_box/./node_modules/url/url.js?");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/***/ ((module) => {

eval("\r\nmodule.exports = {\r\n    isString: function (arg) {\r\n        return typeof (arg) === 'string';\r\n    },\r\n    isObject: function (arg) {\r\n        return typeof (arg) === 'object' && arg !== null;\r\n    },\r\n    isNull: function (arg) {\r\n        return arg === null;\r\n    },\r\n    isNullOrUndefined: function (arg) {\r\n        return arg == null;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://pomodoro_box/./node_modules/url/util.js?");

/***/ }),

/***/ "./src/shared/Timer/Timer.tsx":
/*!************************************!*\
  !*** ./src/shared/Timer/Timer.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Timer: () => (/* binding */ Timer)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _timer_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./timer.css */ \"./src/shared/Timer/timer.css\");\n/* harmony import */ var _timer_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_timer_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Icon */ \"./src/shared/Icon/index.ts\");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Button */ \"./src/shared/Button/index.ts\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _store_actions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store/actions */ \"./src/store/actions.ts\");\n/* harmony import */ var use_sound__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! use-sound */ \"./node_modules/use-sound/dist/use-sound.esm.js\");\n/* harmony import */ var _assets_beep_mp3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../assets/beep.mp3 */ \"./src/assets/beep.mp3\");\n/* harmony import */ var web_worker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! web-worker */ \"./node_modules/web-worker/cjs/browser.js\");\n/* harmony import */ var web_worker__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(web_worker__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! url */ \"./node_modules/url/url.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (typeof window !== 'undefined') {\r\n    const myWorker = new (web_worker__WEBPACK_IMPORTED_MODULE_10___default())(url__WEBPACK_IMPORTED_MODULE_11__.create);\r\n    myWorker.onmessage = (messageEvent) => { console.log(\"Returning event:\", messageEvent); };\r\n    myWorker.postMessage({ data: 123 });\r\n}\r\n// const WORK = 2\r\nconst WORK = 1500;\r\n// const TIMEOUT = 2\r\nconst TIMEOUT = 300;\r\nlet timerContainer = null;\r\nfunction Timer() {\r\n    const [play] = (0,use_sound__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_assets_beep_mp3__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\r\n    const dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\r\n    const task = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.useSelector)((state) => state.tasks.find((task) => !task.done));\r\n    const [time, setTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(WORK);\r\n    const [part, setPart] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('work');\r\n    const [mode, setMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('stop');\r\n    const addTime = () => {\r\n        setTime((time) => time + 60);\r\n    };\r\n    const startTimer = () => {\r\n        if (mode === 'stop' || mode === 'pause') {\r\n            setMode('start');\r\n            setTime((time) => time - 1);\r\n            timerContainer = setInterval(() => {\r\n                setTime((time) => (time - 1 ? time - 1 : 0));\r\n            }, 1000);\r\n        }\r\n    };\r\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\r\n        setTime(WORK);\r\n        setMode('stop');\r\n        setPart('work');\r\n    }, [task]);\r\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\r\n        checkTimer();\r\n    }, [time]);\r\n    const checkTimer = () => {\r\n        if (time < 0) {\r\n            endTimer();\r\n        }\r\n    };\r\n    const stopTimer = () => {\r\n        if (timerContainer !== null && mode === 'start') {\r\n            clearInterval(timerContainer);\r\n            setTime(WORK);\r\n            setMode('stop');\r\n        }\r\n    };\r\n    const pauseTimer = () => {\r\n        if (timerContainer !== null && mode == 'start') {\r\n            setMode('pause');\r\n            clearInterval(timerContainer);\r\n        }\r\n    };\r\n    const endTimer = () => {\r\n        console.log(mode);\r\n        if (timerContainer !== null && part == 'work') {\r\n            clearInterval(timerContainer);\r\n            setTime(TIMEOUT);\r\n            setPart('timeout');\r\n            setMode('stop');\r\n            play();\r\n        }\r\n        if (timerContainer !== null && part == 'timeout') {\r\n            clearInterval(timerContainer);\r\n            setTime(WORK);\r\n            setPart('work');\r\n            setMode('stop');\r\n            endTomato();\r\n            play();\r\n        }\r\n    };\r\n    const endTomato = () => {\r\n        if (task) {\r\n            dispatch((0,_store_actions__WEBPACK_IMPORTED_MODULE_7__.decTomato)(task.id));\r\n        }\r\n    };\r\n    const skipWork = () => {\r\n        if (timerContainer !== null && part == 'work') {\r\n            clearInterval(timerContainer);\r\n            setTime(TIMEOUT);\r\n            setPart('timeout');\r\n            setMode('stop');\r\n        }\r\n    };\r\n    const skipTimeout = () => {\r\n        console.log('skipWork');\r\n        endTomato();\r\n    };\r\n    if (!task) {\r\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { children: \"123\" });\r\n    }\r\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", Object.assign({ className: classnames__WEBPACK_IMPORTED_MODULE_6___default()((_timer_css__WEBPACK_IMPORTED_MODULE_2___default().wrapper), part === 'work' ? (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().work) : (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().timeout), mode === 'start'\r\n            ? (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().start)\r\n            : mode === 'pause'\r\n                ? (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().pause)\r\n                : (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().stop)) }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"header\", Object.assign({ className: (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().header) }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", Object.assign({ className: (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().title) }, { children: task.title })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", Object.assign({ className: (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().tomato) }, { children: part === 'work' ? 'Помидор ' + (task.complete + 1) : 'Перерыв ' + (task.complete + 1) }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", Object.assign({ className: (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().timeWrapper) }, { children: [formatTime(time), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", Object.assign({ onClick: addTime, className: (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().addButton) }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Icon__WEBPACK_IMPORTED_MODULE_4__.Icon, { iconName: 'addButton' }) }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", Object.assign({ className: (_timer_css__WEBPACK_IMPORTED_MODULE_2___default().buttonsBlock) }, { children: [mode === 'stop' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { onClick: startTimer, text: 'Старт', type: 'default' })) : mode === 'pause' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { onClick: startTimer, text: 'Продолжить', type: 'default' })) : mode === 'start' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { onClick: pauseTimer, text: 'Пауза', type: 'default' })) : (''), part === 'work' ? (mode === 'pause' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { onClick: skipWork, text: 'Сделано', type: 'disabledR' })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { onClick: stopTimer, text: 'Стоп', type: 'disabledR' }))) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { onClick: skipTimeout, text: 'Пропустить', type: 'disabledR' }))] }))] })));\r\n}\r\nfunction formatTime(seconds) {\r\n    if (seconds < 0)\r\n        return `00:00`;\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    const minutesString = String(minutes).padStart(2, '0');\r\n    const secondsString = String(remainingSeconds).padStart(2, '0');\r\n    return `${minutesString}:${secondsString}`;\r\n}\r\n\n\n//# sourceURL=webpack://pomodoro_box/./src/shared/Timer/Timer.tsx?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("cad15118be5a548ff3c4")
/******/ })();
/******/ 
/******/ }
);